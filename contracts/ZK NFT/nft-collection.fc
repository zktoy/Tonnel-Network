#pragma version >=0.2.0;

#include "../imports/stdlib.fc";
#include "../imports/merkleTreeNFT.fc";
#include "../jetton/imports/op-codes-nft.fc";
#include "../jetton/imports/params.fc";
#include "../jetton/imports/constants.fc";
#include "../jetton/imports/jetton-utils.fc";

;; TONNEL ZK NFT
int op::transfer_notification() asm "0x7362d09c PUSHINT";

const const::tx_fee_send_jetton = 40000000; ;; 0.04 TON

() mint_tonnel(slice recepient, int amount, slice JETTON_MASTER_ADDRESS) impure inline {

    var msg = begin_cell()
            .store_uint(0x18, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(JETTON_MASTER_ADDRESS)
            .store_coins(const::tx_fee_send_jetton)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(21, 32)
            .store_uint(0, 64)
            .store_slice(recepient)
            .store_coins(20000000)
            .store_ref(
                    begin_cell().store_uint(0x178d4519, 32)
                            .store_uint(0, 64)
                            .store_coins(amount)
                            .store_slice(JETTON_MASTER_ADDRESS)
                            .store_uint(0, 200)
                            .store_uint(0, 67)
                            .store_coins(0)
                            .store_uint(0, 1)
                            .end_cell()
            );

    send_raw_message(msg.end_cell(), 1); ;; paying fees, revert on errors

}
() send_jetton(slice recepient, int amount, slice JETTON_MASTER_ADDRESS, cell JETTON_BYTE_CODE) impure inline {
    if (amount == 0) {
        return ();
    }
    slice jetton_wallet = calculate_user_jetton_wallet_address(my_address(), JETTON_MASTER_ADDRESS, JETTON_BYTE_CODE);

    var msg = begin_cell()
            .store_uint(0x18, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(jetton_wallet)
            .store_coins(const::tx_fee_send_jetton)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0xf8a7ea5, 32)
            .store_uint(0, 64)
            .store_coins(amount)
            .store_slice(recepient)
            .store_uint(0, 2)
            .store_uint(0, 1)
            .store_coins(0)
            .store_uint(0, 1);
    send_raw_message(msg.end_cell(), 1); ;; paying fees, revert on errors

}

() send_ton(slice recepient, int amount, int mode) impure inline {

    var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(recepient)
            .store_grams(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
    send_raw_message(msg, mode);

}

() send_continue() impure inline {
    var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(my_address())
            .store_grams(8 * 100000000)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0, 32)
            .store_uint(0, 64)
            .end_cell();
    send_raw_message(msg, 1);

}

() emit_log_simple (int event_id, slice data) impure inline {
    var msg = begin_cell()
            .store_uint (12, 4) ;; ext_out_msg_info$11 src:MsgAddressInt ()
            .store_uint (1, 2)
            .store_uint (256, 9)
            .store_uint(event_id, 256)
            .store_uint(0, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
            .store_slice(data)
            .end_cell();
    send_raw_message(msg, 0);
}


() transfer_nft_item(slice nft_address, slice new_owner) impure inline {

    var msg = begin_cell()
            .store_uint(0x18, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(nft_address)
            .store_coins(const::tx_fee_send_nft)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::transfer(), 32)
            .store_uint(0, 64)
            .store_slice(new_owner)
            .store_uint(0, 2)
            .store_uint(0, 1)
            .store_coins(0)
            .store_uint(0, 1);
    send_raw_message(msg.end_cell(), 1); ;; paying fees, revert on errors

}


(int, int) encode_number_to_text(int number) {
    int len = 0;
    int value = 0;
    int mult = 1;
    do {
        (number, int res) = number.divmod(10);
        value = value + (res + 48) * mult;
        mult = mult * 256;
        len = len + 1;
    } until (number == 0);
    return (len, value);
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
            .store_int(wc, 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}


() deploy_nft_item(int item_index, cell nft_item_code, int amount) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    var (len, value) = encode_number_to_text(item_index);
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(
                    begin_cell()
                            .store_slice(my_address())
                            .store_ref(
                                    begin_cell()
                                            .store_uint(value, len * 8)
                                            .end_cell())
                            .end_cell()
            );
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors

}


() check_proof_for_trnasfer(int root, int nullifier, int newCommitment, slice transfer_proof) impure {

    slice alf1 = begin_cell().store_uint(189113849972531, 48).store_uint(214437465763263, 48).store_uint(263914761327948, 48).store_uint(237576811802638, 48).store_uint(30878666001041, 48).store_uint(142651362995775, 48).store_uint(77007716138746, 48).store_uint(119932691197078, 48).end_cell().begin_parse();
    slice IC0 = begin_cell().store_uint(185234007627208, 48).store_uint(244640744560658, 48).store_uint(144442789427744, 48).store_uint(145966279664713, 48).store_uint(174656771410752, 48).store_uint(10182432446067, 48).store_uint(201625548889433, 48).store_uint(247130673232669, 48).end_cell().begin_parse();
    slice IC1 = begin_cell().store_uint(147261977236668, 48).store_uint(243840351087340, 48).store_uint(125958757807818, 48).store_uint(133799041747222, 48).store_uint(230369696623980, 48).store_uint(124661718977352, 48).store_uint(85880269694014, 48).store_uint(85984802413192, 48).end_cell().begin_parse();
    slice IC2 = begin_cell().store_uint(187939457446490, 48).store_uint(274518153428821, 48).store_uint(278200914879624, 48).store_uint(223491615525785, 48).store_uint(123121679704913, 48).store_uint(196813090447154, 48).store_uint(17827089085261, 48).store_uint(150256821614282, 48).end_cell().begin_parse();
    slice IC3 = begin_cell().store_uint(178304246123911, 48).store_uint(199715351017763, 48).store_uint(101053488917539, 48).store_uint(68439659645170, 48).store_uint(226333961587762, 48).store_uint(51988622319415, 48).store_uint(204665741336983, 48).store_uint(236254217010421, 48).end_cell().begin_parse();
    slice IC4 = begin_cell().store_uint(162434706651903, 48).store_uint(264743452514069, 48).store_uint(112412402515081, 48).store_uint(82885480618351, 48).store_uint(25917951735505, 48).store_uint(83754027062271, 48).store_uint(52245709302839, 48).store_uint(259676451111832, 48).end_cell().begin_parse();
    slice beta2 = begin_cell().store_uint(53983131665637676933791645538, 96).store_uint(9270504936710799060868431770, 96).store_uint(69352094514504141525714669547, 96).store_uint(55771656108036236707980343141, 96).store_uint(180935328918272288278469744, 96).store_uint(23135862158652605498526059376, 96).store_uint(42398820399778041347200073775, 96).store_uint(37413453413723433454959255301, 96).end_cell().begin_parse();
    slice gamma2 = begin_cell().store_uint(45765300665918301128790692768, 96).store_uint(42137484379184671317244818970, 96).store_uint(56280794141317933024253112594, 96).store_uint(6059577009407902906031811454, 96).store_uint(709198854518927808499549479, 96).store_uint(14165060894806320894179293954, 96).store_uint(55805278558791767872231965478, 96).store_uint(52000413785700509085167893944, 96).end_cell().begin_parse();
    slice delta2 = begin_cell().store_uint(55759467878813050231413985239, 96).store_uint(61270536824888820576878155419, 96).store_uint(56634014838157022710170541747, 96).store_uint(36573918027882474462137342810, 96).store_uint(2003486576362317885654146295, 96).store_uint(30292277287856656074141497835, 96).store_uint(10563845723753665835120835881, 96).store_uint(5390941652862167086734042896, 96).end_cell().begin_parse();



    cell A_cell = transfer_proof~load_ref();
    cell B_cell = transfer_proof~load_ref();
    cell C_cell = transfer_proof~load_ref();
    slice A = A_cell.begin_parse();
    slice B = B_cell.begin_parse();
    slice C = C_cell.begin_parse();
    slice vk_x = IC0;


    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC1, nullifier));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC2, newCommitment));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC3, root));



    slice neg_a = bls_g1_negate(A);
    int success = bls_pairing_check(neg_a,
            B,
            alf1,
            beta2,
            vk_x,
            gamma2,
            C,
            delta2,
            4);
    ifnot (success) {
        throw(error::verify_failed);
    }
}


() check_proof_for_reveal(int root, int nullifier, int id, slice owner, slice reveal_proof) impure {
    slice alf1 = begin_cell().store_uint(189113849972531, 48).store_uint(214437465763263, 48).store_uint(263914761327948, 48).store_uint(237576811802638, 48).store_uint(30878666001041, 48).store_uint(142651362995775, 48).store_uint(77007716138746, 48).store_uint(119932691197078, 48).end_cell().begin_parse();
    slice IC0 = begin_cell().store_uint(185234007627208, 48).store_uint(244640744560658, 48).store_uint(144442789427744, 48).store_uint(145966279664713, 48).store_uint(174656771410752, 48).store_uint(10182432446067, 48).store_uint(201625548889433, 48).store_uint(247130673232669, 48).end_cell().begin_parse();
    slice IC1 = begin_cell().store_uint(147261977236668, 48).store_uint(243840351087340, 48).store_uint(125958757807818, 48).store_uint(133799041747222, 48).store_uint(230369696623980, 48).store_uint(124661718977352, 48).store_uint(85880269694014, 48).store_uint(85984802413192, 48).end_cell().begin_parse();
    slice IC2 = begin_cell().store_uint(187939457446490, 48).store_uint(274518153428821, 48).store_uint(278200914879624, 48).store_uint(223491615525785, 48).store_uint(123121679704913, 48).store_uint(196813090447154, 48).store_uint(17827089085261, 48).store_uint(150256821614282, 48).end_cell().begin_parse();
    slice IC3 = begin_cell().store_uint(178304246123911, 48).store_uint(199715351017763, 48).store_uint(101053488917539, 48).store_uint(68439659645170, 48).store_uint(226333961587762, 48).store_uint(51988622319415, 48).store_uint(204665741336983, 48).store_uint(236254217010421, 48).end_cell().begin_parse();
    slice IC4 = begin_cell().store_uint(162434706651903, 48).store_uint(264743452514069, 48).store_uint(112412402515081, 48).store_uint(82885480618351, 48).store_uint(25917951735505, 48).store_uint(83754027062271, 48).store_uint(52245709302839, 48).store_uint(259676451111832, 48).end_cell().begin_parse();
    slice beta2 = begin_cell().store_uint(53983131665637676933791645538, 96).store_uint(9270504936710799060868431770, 96).store_uint(69352094514504141525714669547, 96).store_uint(55771656108036236707980343141, 96).store_uint(180935328918272288278469744, 96).store_uint(23135862158652605498526059376, 96).store_uint(42398820399778041347200073775, 96).store_uint(37413453413723433454959255301, 96).end_cell().begin_parse();
    slice gamma2 = begin_cell().store_uint(45765300665918301128790692768, 96).store_uint(42137484379184671317244818970, 96).store_uint(56280794141317933024253112594, 96).store_uint(6059577009407902906031811454, 96).store_uint(709198854518927808499549479, 96).store_uint(14165060894806320894179293954, 96).store_uint(55805278558791767872231965478, 96).store_uint(52000413785700509085167893944, 96).end_cell().begin_parse();
    slice delta2 = begin_cell().store_uint(55759467878813050231413985239, 96).store_uint(61270536824888820576878155419, 96).store_uint(56634014838157022710170541747, 96).store_uint(36573918027882474462137342810, 96).store_uint(2003486576362317885654146295, 96).store_uint(30292277287856656074141497835, 96).store_uint(10563845723753665835120835881, 96).store_uint(5390941652862167086734042896, 96).end_cell().begin_parse();

    cell A_cell = reveal_proof~load_ref();
    cell B_cell = reveal_proof~load_ref();
    cell C_cell = reveal_proof~load_ref();
    slice A = A_cell.begin_parse();
    slice B = B_cell.begin_parse();
    slice C = C_cell.begin_parse();
    slice vk_x = IC0;


    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC1, nullifier));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC2, id));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC3, owner.preload_uint(256)));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC4, root));



    slice neg_a = bls_g1_negate(A);
    int success = bls_pairing_check(neg_a,
            B,
            alf1,
            beta2,
            vk_x,
            gamma2,
            C,
            delta2,
            4);
    ifnot (success) {
        throw(error::verify_failed);
    }
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(to_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::report_royalty_params(), 32)
            .store_uint(query_id, 64)
            .store_slice(data);
    send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);


    var (owner_address, next_item_index, content, nft_item_code, royalty_params, zk_info) = load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }

    slice zk_info_slice = zk_info.begin_parse();
    cell jetton_info = zk_info_slice~load_ref();
    int state = zk_info_slice~load_uint(8); ;; 21 middle of mint, 20 init, less than 20 - not initialized
    cell merkle = zk_info_slice~load_ref();
    cell nullifiers = zk_info_slice~load_dict();

    if (state < 20) { ;; init merkle
        (state, merkle) = construct_tree(state, merkle);

        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, begin_cell().store_uint(state, 8).store_ref(jetton_info).store_ref(merkle).store_dict(nullifiers).end_cell());
        send_ton(sender_address, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);

        return ();
    }

    if(state == 21) { ;; continue merkle tree operation
        throw_unless(error::access_denied, op == 0);
        (int index, state, merkle) = insert(0, 0, merkle);
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, begin_cell().store_uint(state, 8).store_ref(jetton_info).store_ref(merkle).store_dict(nullifiers).end_cell());
        send_ton(sender_address, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        return ();
    }

    slice jetton_info_slice = jetton_info.begin_parse();
    slice jetton_master_address = jetton_info_slice~load_msg_addr();
    cell JETTON_BYTECODE = jetton_info_slice~load_ref();
    if (op == op::transfer_notification()) { ;; deploy new anonymous nft (by owner)
        ;; should check if jetton is valid
        int send_amount = in_msg_body~load_coins(); ;; Jettons send




        throw_unless(error::access_denied, equal_slices(sender_address, calculate_user_jetton_wallet_address(my_address(), jetton_master_address, JETTON_BYTECODE)));


        slice origin_sender = in_msg_body~load_msg_addr(); ;; transfer origin address
        if(send_amount != 1000000000000) {
            send_jetton(origin_sender, send_amount, jetton_master_address, JETTON_BYTECODE);

            return ();
        }
        cell new_body = in_msg_body~load_ref();
        in_msg_body = new_body.begin_parse();
        int amount_to_fwd = in_msg_body~load_coins();

        cell commitment = in_msg_body~load_ref();
        slice commitment_slice = commitment.begin_parse();
        int commitment_value = commitment_slice~load_uint(256);
        int id = commitment_slice~load_uint(32);

        if (id != next_item_index) {
            send_jetton(origin_sender, send_amount, jetton_master_address, JETTON_BYTECODE);

            return ();
        }
        if (id == 111){
            send_jetton(origin_sender, send_amount, jetton_master_address, JETTON_BYTECODE);
            return ();
        }
        send_jetton(owner_address, send_amount, jetton_master_address, JETTON_BYTECODE);

        (int index, state, merkle) = insert(commitment_value, 1, merkle);

        deploy_nft_item(next_item_index, nft_item_code, amount_to_fwd);

        emit_log_simple(op::mint(), begin_cell().store_uint(commitment_value, 256).store_uint(index, 32).end_cell().begin_parse());

        next_item_index += 1;

        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, begin_cell().store_uint(state, 8).store_ref(jetton_info).store_ref(merkle).store_dict(nullifiers).end_cell());
        send_continue();

        return ();
    }

    if (op == op::private_transfer) { ;; transfer private nft ( by relayers with proof from real owner)

        cell transfer_info = in_msg_body~load_ref();
        slice transfer_info_slice = transfer_info.begin_parse();
        int root = transfer_info_slice~load_uint(256);
        int nullifier = transfer_info_slice~load_uint(256);
        int newCommitment = transfer_info_slice~load_uint(256);



        throw_unless(error::verify_failed_double_spend, is_unknown_nullifier(nullifier, nullifiers));
        throw_unless(error::verify_failed_input, root < FIELD_SIZE);
        throw_unless(error::verify_failed_input, nullifier < FIELD_SIZE);
        throw_unless(error::verify_failed_input, newCommitment < FIELD_SIZE);
        throw_unless(error::verify_failed_root, is_known_root(root));
        cell transfer_proof = transfer_info_slice~load_ref();
        slice transfer_proof_slice = transfer_proof.begin_parse();
        check_proof_for_trnasfer(root, nullifier, newCommitment, transfer_proof_slice);

        (int index, state, merkle) = insert(newCommitment, 1, merkle);

        emit_log_simple(op::private_transfer, begin_cell().store_uint(newCommitment, 256).store_uint(index, 32).store_uint(nullifier, 256).end_cell().begin_parse());

        nullifiers~udict_set(256, nullifier, begin_cell().end_cell().begin_parse());
        mint_tonnel(sender_address, 250000000000, jetton_master_address);
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, begin_cell().store_uint(state, 8).store_ref(jetton_info).store_ref(merkle).store_dict(nullifiers).end_cell());

        send_continue();

        return ();
    }

    if (op == op::reveal) { ;; reveal owner_ship ( by relayers with proof from real owner)

        ;; owner nullifier root id should be load
        cell transfer_info = in_msg_body~load_ref();
        slice transfer_info_slice = transfer_info.begin_parse();
        int root = transfer_info_slice~load_uint(256);
        int nullifier = transfer_info_slice~load_uint(256);
        slice owner = transfer_info_slice~load_msg_addr();
        int id = transfer_info_slice~load_uint(32);



        throw_unless(error::verify_failed_input, root < FIELD_SIZE);
        throw_unless(error::verify_failed_input, nullifier < FIELD_SIZE);
        throw_unless(error::verify_failed_double_spend, is_unknown_nullifier(nullifier, nullifiers));
        throw_unless(error::verify_failed_root, is_known_root(root));
        cell reveal_proof = transfer_info_slice~load_ref();
        slice reveal_proof_slice = reveal_proof.begin_parse();

        check_proof_for_reveal(root, nullifier, id, owner, reveal_proof_slice);
        cell state_init = calculate_nft_item_state_init(id, nft_item_code);
        slice nft_address = calculate_nft_item_address(workchain(), state_init);


        nullifiers~udict_set(256, nullifier, begin_cell().end_cell().begin_parse());

        ;; transfer nft item to given owner
        transfer_nft_item(nft_address, owner);

        emit_log_simple(op::reveal, begin_cell().store_uint(id, 32).store_slice(owner).store_uint(nullifier, 256).end_cell().begin_parse());
        mint_tonnel(sender_address, 50000000000, jetton_master_address);

        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, begin_cell().store_uint(state, 8).store_ref(jetton_info).store_ref(merkle).store_dict(nullifiers).end_cell());

        return ();
    }

    if (op == op::ownership_assigned()) { ;; hide owner_ship (by owner sent from nft item)
        slice sender_origin = in_msg_body~load_msg_addr();
        cell commitment_msg = in_msg_body~load_ref();
        slice commitment_msg_slice = commitment_msg.begin_parse();
        int commitment_value = commitment_msg_slice~load_uint(256);
        int id = commitment_msg_slice~load_uint(32);

        cell state_init = calculate_nft_item_state_init(id, nft_item_code);
        slice nft_address = calculate_nft_item_address(workchain(), state_init);
        throw_unless(error::access_denied, equal_slices(sender_address, nft_address));


        (int index, state, merkle) = insert(commitment_value, 1, merkle);

        emit_log_simple(op::hide, begin_cell().store_uint(commitment_value, 256).store_uint(index, 32).store_uint(id, 32).end_cell().begin_parse());

        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, begin_cell().store_uint(state, 8).store_ref(jetton_info).store_ref(merkle).store_dict(nullifiers).end_cell());
        mint_tonnel(sender_origin, 50000000000, jetton_master_address);

        send_continue();
        return ();

    }

    throw_unless(401, equal_slices(sender_address, owner_address));


    if (op == 3) { ;; change owner
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, zk_info);
        return ();
    }


    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _, _, _) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

(int, int, slice) royalty_params() method_id {
    var (_, _, _, _,royalty, _) = load_data();
    slice rs = royalty.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, content, _, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
            .store_uint(1, 8) ;; offchain tag
            .store_slice(common_content)
            .store_ref(individual_nft_content)
            .end_cell());
}
